#summary API и утилита для переформатирования кода согласно некоторым правилам.
#labels Phase-Requirements

= Правила форматирования кода =
==Варианты форматирования определения функции==
Однострочный:
{{{
fun funName(arg1 arg2) <body>
}}}
Где body отформатирована в однострочном варианте.

Многострочный:
{{{
fun funName(arg1 arg2) 
  <body>
}}}
Где body отформатировано как угодно.

==Варианты форматирования вызова функции==
Однострочный:
{{{
f(<arg> <arg>)
}}}
Где arg отформатированы в однострочном варианте.

Многострочный:
{{{
f(
  <arg>
  <arg>
)
}}}
Где arg отформатированы как угодно.

При использовании многострочного варианта форматирования используются отступы:
{{{
f(
  1
  +(2 1)
  *(
    2
    5
  )
) 
}}} 

==Выбор варианта форматирования==
По возможности предложение должно быть отформатировано в однострочном варианте.

Если в однострочном варианте предложение оказывается слишком длинным (длиннее заданного числа знаков), можно применять многострочный вариант.

Есть набор функций, которые по возможности должны форматироваться в многострочном варианте. По умолчанию в этом наборе присутствует лишь одна функция `if`.



=API для форматирования=
TODO: Разработать API...


= Утилита =
Утилита представляет собой консольное приложение, простую обертку над соответствующим API. Утилита читает текст из стандартного потока ввода (с консоли) и выводит отформатированный текст в стандартный поток вывода.

При запуске можно указать набор ключей, управляющий правилами форматирования. Все ключи имеют разумные значения по умолчанию и необязательны.

==Ключи==
`-h` вывод справки по ключам.

`-m:funName` функция funName будет по возможности отформатирована в многострочном варианте.

`-l:LEN` предложение будет форматироваться в однострочном варианте, если длина получающейся строки не больше `LEN`.


