#summary Грязные функции — функции с побочными эффектами
#labels Phase-Requirements

Обычные функции в языке fun являются _чистыми функциями_, то есть не имеют побочных эффектов. Это означает, что функции на одних и тех же значениях своих аргументов возвращают все время один и тот же результат. Более того, вызов или не вызов такой функции не может повлиять на результат работы любой другой функции.

Естественно, в некоторых случаях крайне неудобно ограничивать себя лишь чистыми функциями. Например, операции ввода-вывода по своей сути сопровождаются побочными эффектами.

Между тем, язык fun во многих ситуациях может полагаться на чистоту функций. В частности, на чистоте функций основана ленивость вычислений.

В связи с этим функции с побочными эффектами (_грязные функции_) должны явно отличаться от чистых функций. Для этой цели в языке fun служит суффикс `!` у имени функции. Например, функции `readLine!` и `writeLine!` грязные, а функции `if` и `+` чистые.

При определении новой функции, если тело функции является грязным, то определяемая функция также является грязной, а значит имя этой функции *должно* заканчиваться суффиксом `!`.

В результате карринга грязной функции всегда получается грязная функция.

В результате карринга чистой функции получается чистая функция тогда и только тогда, когда   в качестве одного из аргументов указывается чистая функция.

Вот примеры грязных функций:
{{{
writeLine!(s).
+(readInt! readInt!).
+(readInt!)(2).
+(2)(readInt!).

fun readWord! +(readInt! *(256 readInt!)).
}}}

При работе с грязными функциями важным является порядок их вызова. Поэтому при вызове функции, перед ее вычислением вычисляются все ее грязные фактические аргументы, причем в порядке слева направо.

Для удобства работы с грязными функциями существует вспомогательная функция `seq` (от sequence — последовательность) с неограниченным количеством аргументов. Эта функция возвращает результат вычисления последнего своего аргумента.

----
[Specifications] [Functions]